pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials-id'
        SONAR_TOKEN = credentials('sonar_token') // √Ä cr√©er dans Jenkins
        IMAGE_NAME    = 'moise25/monmicroservice'
        IMAGE_TAG     = "${env.BUILD_NUMBER}"
        K8S_NAMESPACE = 'devops'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'

        // Configuration SonarQube
        SONAR_HOST_URL = 'http://localhost:9000'
        SONAR_PROJECT_KEY = 'monprojet'
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "========================================="
                echo "STAGE 1 : Checkout du code source"
                echo "========================================="

                git branch: 'main',
                    url: 'https://github.com/Dansoko22md/pipeline-java-microservice.git'

                echo "‚úÖ Code r√©cup√©r√© avec succ√®s depuis Git"
            }
        }

stage('Build avec Maven') {
    steps {
        echo "========================================="
        echo "STAGE 2 : Build du projet avec Maven"
        echo "========================================="

        script {
            // Option 1 : Sp√©cifier la classe principale via propri√©t√© syst√®me
            sh '''
                mvn clean install -DskipTests \
                    -Dspring-boot.run.main-class=tn.esprit.devops.RevisionApplication
            '''

            sh '''
                mvn package -DskipTests \
                    -Dspring-boot.run.main-class=tn.esprit.devops.RevisionApplication
            '''
        }

        echo "‚úÖ Build Maven termin√© avec succ√®s"
    }
}

        stage('Tests Unitaires') {
            steps {
                echo "========================================="
                echo "STAGE 2.5 : Ex√©cution des tests unitaires"
                echo "========================================="

                sh 'mvn test'

                // Publier les r√©sultats des tests
                junit '**/target/surefire-reports/*.xml'

                echo "‚úÖ Tests unitaires termin√©s"
            }
        }

        stage('Analyse SonarQube') {
            steps {
                echo "========================================="
                echo "STAGE 3 : Analyse de qualit√© du code avec SonarQube"
                echo "========================================="

                script {
                    sh """
                        echo "üîç Lancement de l'analyse SonarQube..."

                        mvn sonar:sonar \\
                            -Dsonar.host.url=${SONAR_HOST_URL} \\
                            -Dsonar.login=${SONAR_TOKEN} \\
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \\
                            -Dsonar.projectName='Mon Microservice Pipeline' \\
                            -Dsonar.projectVersion=${IMAGE_TAG} \\
                            -Dsonar.sources=src/main/java \\
                            -Dsonar.tests=src/test/java \\
                            -Dsonar.java.binaries=target/classes \\
                            -Dsonar.junit.reportPaths=target/surefire-reports \\
                            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \\
                            -Dsonar.java.coveragePlugin=jacoco

                        echo "‚úÖ Analyse SonarQube termin√©e avec succ√®s"
                        echo "üìä Consultez les r√©sultats : ${SONAR_HOST_URL}/dashboard?id=${SONAR_PROJECT_KEY}"
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                echo "========================================="
                echo "STAGE 3.5 : V√©rification du Quality Gate SonarQube"
                echo "========================================="

                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            echo "‚ö†Ô∏è  Quality Gate √©chou√© : ${qg.status}"
                            echo "üîç V√©rifiez les r√©sultats : ${SONAR_HOST_URL}/dashboard?id=${SONAR_PROJECT_KEY}"
                            // Ne pas bloquer le pipeline, juste avertir
                            // error "Pipeline interrompu √† cause du Quality Gate"
                        } else {
                            echo "‚úÖ Quality Gate r√©ussi !"
                        }
                    }
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                echo "========================================="
                echo "STAGE 4 : Build et Push de l'image Docker"
                echo "========================================="

                script {
                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKERHUB_CREDENTIALS}",
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            echo "üîê Connexion √† Docker Hub..."
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        '''
                    }

                    sh """
                        echo "üê≥ Construction de l'image Docker..."
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -t ${IMAGE_NAME}:latest .
                        echo "‚úÖ Image construite : ${IMAGE_NAME}:${IMAGE_TAG}"
                    """

                    sh """
                        echo "üì§ Push des images vers Docker Hub..."
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                        docker push ${IMAGE_NAME}:latest
                        echo "‚úÖ Images push√©es avec succ√®s"
                    """
                }
            }
        }

        stage('D√©ployer sur Cluster Kubernetes') {
            steps {
                echo "========================================="
                echo "STAGE 5 : D√©ploiement sur Kubernetes"
                echo "========================================="

                script {
                    // V√©rifier l'acc√®s kubectl
                    sh '''
                        echo "‚öôÔ∏è  V√©rification de kubectl..."
                        export KUBECONFIG=/var/lib/jenkins/.kube/config
                        kubectl version --client
                        echo "üîç V√©rification de la connexion au cluster..."
                        kubectl cluster-info || echo "‚ö†Ô∏è  Attention: probl√®me de connexion au cluster"
                    '''

                    // Cr√©er ou v√©rifier le namespace
                    sh """
                        export KUBECONFIG=/var/lib/jenkins/.kube/config
                        echo "üì¶ V√©rification du namespace ${K8S_NAMESPACE}..."
                        kubectl get namespace ${K8S_NAMESPACE} || kubectl create namespace ${K8S_NAMESPACE}
                    """

                    // D√©ployer PostgreSQL avec v√©rifications compl√®tes
                    sh """
                        export KUBECONFIG=/var/lib/jenkins/.kube/config
                        echo "üóÑÔ∏è  D√©ploiement de PostgreSQL..."

                        # Toujours appliquer le manifest pour s'assurer que tout est √† jour
                        echo "üìù Application du manifest PostgreSQL..."
                        kubectl apply -f k8s/postgres-deployment.yaml -n ${K8S_NAMESPACE}

                        # V√©rifier que le service existe
                        echo "üîç V√©rification du service PostgreSQL..."
                        kubectl get svc postgres-service -n ${K8S_NAMESPACE} || {
                            echo "‚ùå Le service postgres-service n'existe pas!"
                            kubectl get svc -n ${K8S_NAMESPACE}
                            exit 1
                        }

                        # V√©rifier que le d√©ploiement existe
                        echo "üîç V√©rification du d√©ploiement PostgreSQL..."
                        kubectl get deployment postgres -n ${K8S_NAMESPACE} || {
                            echo "‚ùå Le d√©ploiement postgres n'existe pas!"
                            kubectl get deployments -n ${K8S_NAMESPACE}
                            exit 1
                        }

                        # Attendre que PostgreSQL soit pr√™t
                        echo "‚è≥ Attente que PostgreSQL soit pr√™t (timeout 5 min)..."
                        kubectl wait --for=condition=ready pod -l app=postgres -n ${K8S_NAMESPACE} --timeout=300s || {
                            echo "‚ö†Ô∏è  PostgreSQL n'est pas pr√™t apr√®s 5 minutes!"
                            echo ""
                            echo "üìä √âtat des pods PostgreSQL:"
                            kubectl get pods -l app=postgres -n ${K8S_NAMESPACE}
                            echo ""
                            echo "üìã Description du pod:"
                            kubectl describe pod -l app=postgres -n ${K8S_NAMESPACE}
                            echo ""
                            echo "üìú Logs PostgreSQL:"
                            kubectl logs -l app=postgres -n ${K8S_NAMESPACE} --tail=50 || echo "Pas de logs"
                            exit 1
                        }

                        echo "‚úÖ PostgreSQL est pr√™t et accessible"
                        echo "üîó Service DNS: postgres-service.${K8S_NAMESPACE}.svc.cluster.local"
                    """

                    // D√©ployer Spring Boot avec v√©rification am√©lior√©e
                    sh """
                        export KUBECONFIG=/var/lib/jenkins/.kube/config
                        echo "üöÄ D√©ploiement de Spring Boot version ${IMAGE_TAG}..."

                        # V√©rifier si le deployment existe (sans afficher l'erreur)
                        if kubectl get deployment spring-deployment -n ${K8S_NAMESPACE} >/dev/null 2>&1; then
                            echo "üîÑ Le deployment existe, mise √† jour de l'image..."
                            kubectl set image deployment/spring-deployment springboot=${IMAGE_NAME}:${IMAGE_TAG} -n ${K8S_NAMESPACE}
                        else
                            echo "üìù Le deployment n'existe pas, cr√©ation..."
                            kubectl apply -f k8s/spring-deployment.yaml -n ${K8S_NAMESPACE}

                            # Attendre que le deployment soit cr√©√©
                            echo "‚è≥ Attente de la cr√©ation du deployment..."
                            sleep 10

                            # Mettre √† jour l'image avec la version sp√©cifique
                            echo "üîÑ Mise √† jour de l'image vers la version ${IMAGE_TAG}..."
                            kubectl set image deployment/spring-deployment springboot=${IMAGE_NAME}:${IMAGE_TAG} -n ${K8S_NAMESPACE}
                        fi

                        echo "‚è≥ Attente du rollout (timeout 10 minutes)..."
                        kubectl rollout status deployment/spring-deployment -n ${K8S_NAMESPACE} --timeout=600s || {
                            echo "‚ö†Ô∏è  Timeout du rollout, diagnostic en cours..."
                            kubectl get pods -n ${K8S_NAMESPACE}
                            kubectl describe pod -l app=springboot -n ${K8S_NAMESPACE} | tail -50
                            kubectl logs -l app=springboot -n ${K8S_NAMESPACE} --tail=50 || echo "Pas de logs disponibles"
                            exit 1
                        }
                    """

                    // Afficher l'√©tat du d√©ploiement
                    sh """
                        export KUBECONFIG=/var/lib/jenkins/.kube/config
                        echo ""
                        echo "========================================="
                        echo "üìä √âTAT DU D√âPLOIEMENT"
                        echo "========================================="

                        echo ""
                        echo "üîπ Pods :"
                        kubectl get pods -n ${K8S_NAMESPACE} -o wide

                        echo ""
                        echo "üîπ Services :"
                        kubectl get svc -n ${K8S_NAMESPACE}

                        echo ""
                        echo "üîπ Deployments :"
                        kubectl get deployments -n ${K8S_NAMESPACE}

                        echo ""
                        echo "üîπ Ressources :"
                        kubectl get all -n ${K8S_NAMESPACE}
                    """

                    // Obtenir l'URL d'acc√®s
                    sh """
                        export KUBECONFIG=/var/lib/jenkins/.kube/config
                        echo ""
                        echo "========================================="
                        echo "üåê ACC√àS √Ä L'APPLICATION"
                        echo "========================================="

                        if command -v minikube &> /dev/null; then
                            echo "üîó URL d'acc√®s Minikube :"
                            minikube service spring-service -n ${K8S_NAMESPACE} --url || {
                                MINIKUBE_IP=\$(minikube ip)
                                echo "üí° URL : http://\${MINIKUBE_IP}:30080"
                            }
                        else
                            NODE_IP=\$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}')
                            NODE_PORT=\$(kubectl get svc spring-service -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}')
                            echo "üí° Acc√®s via NodePort : http://\${NODE_IP}:\${NODE_PORT}"
                        fi
                    """
                }
            }
        }
    }

    post {
        success {
            echo ""
            echo "========================================="
            echo "‚úÖ PIPELINE EX√âCUT√â AVEC SUCC√àS !"
            echo "========================================="
            echo ""
            echo "üéâ Version ${IMAGE_TAG} d√©ploy√©e sur Kubernetes"
            echo "üìä Analyse SonarQube : ${SONAR_HOST_URL}/dashboard?id=${SONAR_PROJECT_KEY}"
            echo ""
            echo "üìå Prochaines √©tapes :"
            echo "   1. V√©rifier : kubectl get pods -n ${K8S_NAMESPACE}"
            echo "   2. Logs : kubectl logs -l app=springboot -n ${K8S_NAMESPACE}"
            echo "   3. Acc√®s : minikube service spring-service -n ${K8S_NAMESPACE}"
            echo "   4. SonarQube : ${SONAR_HOST_URL}"
            echo ""

            script {
                sh """
                    export KUBECONFIG=/var/lib/jenkins/.kube/config
                    echo "üìä R√©sum√© final :"
                    kubectl get all -n ${K8S_NAMESPACE}
                """
            }
        }

        failure {
            echo ""
            echo "========================================="
            echo "‚ùå √âCHEC DU PIPELINE"
            echo "========================================="

            script {
                sh """
                    export KUBECONFIG=/var/lib/jenkins/.kube/config
                    echo "üîπ Pods :"
                    kubectl get pods -n ${K8S_NAMESPACE} || echo "Erreur r√©cup√©ration pods"

                    echo ""
                    echo "üîπ √âv√©nements r√©cents :"
                    kubectl get events -n ${K8S_NAMESPACE} --sort-by='.lastTimestamp' | tail -20 || true

                    echo ""
                    echo "üîπ Logs Spring Boot :"
                    kubectl logs -l app=springboot -n ${K8S_NAMESPACE} --tail=50 || echo "Pas de logs Spring Boot"

                    echo ""
                    echo "üîπ Logs PostgreSQL :"
                    kubectl logs -l app=postgres -n ${K8S_NAMESPACE} --tail=50 || echo "Pas de logs PostgreSQL"

                    echo ""
                    echo "üîπ Description des pods en erreur :"
                    kubectl describe pods -n ${K8S_NAMESPACE} | grep -A 10 "Error\\|Failed\\|Pending" || true
                """
            }
        }

        always {
            echo ""
            echo "========================================="
            echo "üßπ NETTOYAGE"
            echo "========================================="

            script {
                sh '''
                    echo "üîì D√©connexion Docker Hub..."
                    docker logout || true

                    echo "üóëÔ∏è  Nettoyage des images Docker inutilis√©es..."
                    docker image prune -f || true

                    echo "‚úÖ Nettoyage termin√©"
                '''
            }

            echo ""
            echo "üìù FIN DU PIPELINE"
            echo "========================================="
        }
    }
}